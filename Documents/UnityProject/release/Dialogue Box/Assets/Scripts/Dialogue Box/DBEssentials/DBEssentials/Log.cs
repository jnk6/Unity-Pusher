//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace DBEssentials
{	
/**
 * To handle the number of dialague frames that can be viewable at one time
 * and storing past conversations made by the player
***/
	/// <summary>
	/// Handles the number of dialogue frames that can be viewable at one time and stores
	/// past conversations made by the player.
	/// </summary>
	public class Log {
		public enum state {opened, closed};

		DFStack back;
		DFStack front;
		ReversableDFQueue viewable;
		state curState;
		
		int view_size;

		/// <summary>
		/// Initializes a new instance of the <see cref="DBEssentials.Log"/> class.
		/// </summary>
		/// <param name="viewSize">View size.</param>
		public Log (int viewSize){
			curState = state.closed;
			ViewSize = viewSize;
			back = new DFStack();
			front = new DFStack ();
			viewable = new ReversableDFQueue();
		}

		/// <summary>
		/// combines all the conversations in the viewable list and returns a single string
		/// </summary>
		public string read(){
			curState = state.opened;
			if (viewable.Size < ViewSize) {
				for (int i = viewable.Size; i < ViewSize; i++){
					if (hasBack ()){
						moveBack ();
					}
					else{
						break;
					}
				}
			}
			string charName = "DEFAULT ^_^";
			string text = "";
			for (ReversableDFQueue dfq = viewable.Copy(); !dfq.IsEmpty;){
				DialogueFrame df = dfq.reverseEnqueue();

				if (! (charName==df.CharName)){

					if (charName != "Event" && df.CharName == ""){
						charName = "Event";
					}
					else{
						charName = df.CharName;
					}
						
					text += '\n'+ charName + ":\n";
				}
				string temp = df.DialogueText;
				if (temp.Length>3){
					//Debug.Log(temp.Substring(0,3));
					if (temp.Substring(0,3) == "..."){
						temp = temp.Substring(3);
					}
					if (temp.Substring(temp.Length-3,3) == "..."){
						temp = temp.Substring(0,temp.Length-3);
					}

				}

				text += temp;

			}
			return text;
		}

		/// <summary>
		/// Insert the specified dialogue frame. Uses reset() before adding to the list so the frame will
		/// be inserted to the very front of the list.
		/// </summary>
		/// <param name="df">Df.</param>
		public void insert (DialogueFrame df){
			reset ();
			back.push (df);
		}

		/// <summary>
		/// Reset the position of viewable to the front of the list. Called by insert() to make sure the frame
		/// inserted is at the correct position
		/// </summary>
		public void reset (){
			while (!viewable.IsEmpty) {
				back.push (viewable.reverseEnqueue());	
			}
		}

		/// <summary>
		/// Move back in time by one dialogue frame. Moves viewable to the back of the list by one element.
		/// </summary>
		public void moveBack(){

			viewable.enqueue(back.pop());
			if (viewable.Size > ViewSize) {
				front.push (viewable.dequeue());		
			}
			
		}
		
		//move forward in time by one dialogue frame
		/// <summary>
		/// Move forward in time by one dialogue frame. Moves viewable to the forward of the list by one element.
		/// </summary>
		public void moveForward() { 
			viewable.reverseDequeue(front.pop ());
			back.push (viewable.reverseEnqueue());
			
		}

		/// <summary>
		/// If it is possible to move viewable towards the back of the list.
		/// </summary>
		/// <returns><c>true</c>, if moving back is possible, <c>false</c> otherwise.</returns>
		public bool hasBack(){
			return !back.IsEmpty;
			
		}

		/// <summary>
		/// If it is possible to move viewable towards the front of the list.
		/// </summary>
		/// <returns><c>true</c>, if moving front is possible, <c>false</c> otherwise.</returns>
		public bool hasFront (){
			return !front.IsEmpty;
		}
		
	/**
     * the amount of dialogue frames to view per log frame (which is supposed 
     * to be bigger than a dialogue frame)
    ***/
		/// <summary>
		/// the amount of dialogue frames to view per log frame (which is supposed
		/// to be bigger than a dialogue frame)
		/// </summary>
		/// <value>The size of the viewable</value>
		public int ViewSize
		{
			get{
				return view_size;
			}
			set {
				view_size = value;
			}
		}

		/// <summary>
		/// Gets or sets the state.
		/// </summary>
		/// <value>Is the Log currently openned or closed.</value>
		public state State{
			get{return curState;}
			set { curState = value;}
		}
		
	}
}

